on:
  push:
    branches:
    - master
  pull_request:

name: x

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
      with:
        components: clippy, rustfmt
    - run: cargo fmt --all -- --check
    - run: cargo clippy --workspace --examples --tests --all-features -- -D warnings
    - run: cargo test

  #
  # Build x for all platforms
  #

  build-ubuntu-latest:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - run: cargo install --path xbuild --root .
    - uses: actions/upload-artifact@v2
      with:
        name: ubuntu-latest-x
        path: bin/x
    - uses: actions/upload-artifact@v2
      with:
        name: ubuntu-latest-xrun
        path: bin/xrun

  build-macos-latest:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - run: cargo install --path xbuild --root .
    - uses: actions/upload-artifact@v2
      with:
        name: macos-latest-x
        path: bin/x
    - uses: actions/upload-artifact@v2
      with:
        name: macos-latest-xrun
        path: bin/xrun

  build-windows-latest:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@v1
    - run: cargo install --path xbuild --root .
    - uses: actions/upload-artifact@v2
      with:
        name: windows-latest-x
        path: bin/x.exe
    - uses: actions/upload-artifact@v2
      with:
        name: windows-latest-xrun
        path: bin/xrun.exe

  #
  # Build test projects for linux-x64-debug
  #

  build-ubuntu-latest-linux-x64-debug:
    strategy:
      fail-fast: false
      matrix:
        artifact: [helloworld, raqote-winit, template]
    runs-on: ubuntu-latest
    needs: build-ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # install x
    - uses: actions/download-artifact@v2
      with:
        name: ubuntu-latest-x
    - run: chmod +x ./x

    # install rust
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly
        targets: x86_64-unknown-linux-gnu

    # install dart (used by ffi-gen)
    - uses: dart-lang/setup-dart@v1

    # install gtk3
    - run: sudo apt-get update && sudo apt-get install libgtk-3-dev

    # prepare sources
    - run: ../x new template
      working-directory: examples

    # build artifact
    - run: ../../x build --platform linux --arch x64
      working-directory: examples/${{ matrix.artifact }}

    # upload artifact
    - run: tar --zstd -cf ${{ matrix.artifact }}.AppDir.tar.zst ${{ matrix.artifact }}.AppDir
      working-directory: examples/${{ matrix.artifact }}/target/x/debug/linux/x64
    - uses: actions/upload-artifact@v2
      with:
        name: ubuntu-latest-linux-x64-debug-${{ matrix.artifact }}
        path: examples/${{ matrix.artifact }}/target/x/debug/linux/x64/${{ matrix.artifact }}.AppDir.tar.zst

  # TODO: build-macos-latest-linux-x64-debug

  # TODO: build-windows-latest-linux-x64-debug

  #
  # Build test projects for linux-x64-release
  #

  build-ubuntu-latest-linux-x64-release:
    strategy:
      fail-fast: false
      matrix:
        artifact: [helloworld, raqote-winit, template]
    runs-on: ubuntu-latest
    needs: build-ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # install x
    - uses: actions/download-artifact@v2
      with:
        name: ubuntu-latest-x
    - run: chmod +x ./x

    # install rust
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly
        targets: x86_64-unknown-linux-gnu

    # install dart (used by ffi-gen)
    - uses: dart-lang/setup-dart@v1

    # install gtk3 and squashfs-tools
    - run: sudo apt-get update && sudo apt-get install libgtk-3-dev squashfs-tools

    # prepare sources
    - run: ../x new template
      working-directory: examples

    # build artifact
    - run: ../../x build --platform linux --arch x64 --release
      working-directory: examples/${{ matrix.artifact }}

    # upload artifact
    - uses: actions/upload-artifact@v2
      with:
        name: ubuntu-latest-linux-x64-release-${{ matrix.artifact }}
        path: examples/${{ matrix.artifact }}/target/x/release/linux/x64/${{ matrix.artifact }}.AppImage

  #
  # Build test projects for macos-x64-debug
  #

  build-ubuntu-latest-macos-x64-debug:
    strategy:
      fail-fast: false
      matrix:
        artifact: [helloworld, raqote-winit, template]
    runs-on: ubuntu-latest
    needs: build-ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # install x
    - uses: actions/download-artifact@v2
      with:
        name: ubuntu-latest-x
    - run: chmod +x ./x

    # install rust
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly
        targets: x86_64-apple-darwin

    # install dart (used by ffi-gen)
    - uses: dart-lang/setup-dart@v1

    # install llvm
    - uses: KyleMayes/install-llvm-action@v1
      with:
        version: 13
    - run: sudo ln -s llvm-ar-13 /usr/bin/llvm-ar

    # prepare sources
    - run: ../x new template
      working-directory: examples

    # build artifact
    - run: ../../x build --platform macos --arch x64
      working-directory: examples/${{ matrix.artifact }}

    # upload artifact
    - run: tar --zstd -cf ${{ matrix.artifact }}.app.tar.zst ${{ matrix.artifact }}.app
      working-directory: examples/${{ matrix.artifact }}/target/x/debug/macos/x64
    - uses: actions/upload-artifact@v2
      with:
        name: ubuntu-latest-macos-x64-debug-${{ matrix.artifact }}
        path: examples/${{ matrix.artifact }}/target/x/debug/macos/x64/${{ matrix.artifact }}.app.tar.zst

  build-macos-latest-macos-x64-debug:
    strategy:
      fail-fast: false
      matrix:
        artifact: [helloworld, raqote-winit, template]
    runs-on: macos-latest
    needs: build-macos-latest
    steps:
    - uses: actions/checkout@v2

    # install x
    - uses: actions/download-artifact@v2
      with:
        name: macos-latest-x
    - run: chmod +x ./x

    # install rust
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly
        targets: x86_64-apple-darwin

    # install dart (used by ffi-gen)
    - uses: dart-lang/setup-dart@v1

    # prepare sources
    - run: ../x new template
      working-directory: examples

    # build artifact
    - run: ../../x build --platform macos --arch x64
      working-directory: examples/${{ matrix.artifact }}

    # upload artifact
    - run: gtar --zstd -cf ${{ matrix.artifact }}.app.tar.zst ${{ matrix.artifact }}.app
      working-directory: examples/${{ matrix.artifact }}/target/x/debug/macos/x64
    - uses: actions/upload-artifact@v2
      with:
        name: macos-latest-macos-x64-debug-${{ matrix.artifact }}
        path: examples/${{ matrix.artifact }}/target/x/debug/macos/x64/${{ matrix.artifact }}.app.tar.zst

  build-windows-latest-macos-x64-debug:
    if: false
    strategy:
      fail-fast: false
      matrix:
        artifact: [helloworld, raqote-winit, template]
    runs-on: windows-latest
    needs: build-windows-latest
    steps:
    - uses: actions/checkout@v2

    # install x
    - uses: actions/download-artifact@v2
      with:
        name: windows-latest-x

    # install rust
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly
        targets: x86_64-apple-darwin

    # install dart (used by ffi-gen)
    - uses: dart-lang/setup-dart@v1

    # prepare sources
    - run: ../x.exe new template
      working-directory: examples

    # build artifact
    - run: ../../x.exe build --platform macos --arch x64
      working-directory: examples/${{ matrix.artifact }}

    # upload artifact
    - run: tar --zstd -cf ${{ matrix.artifact }}.app.tar.zst ${{ matrix.artifact }}.app
      working-directory: examples/${{ matrix.artifact }}/target/x/debug/macos/x64
    - uses: actions/upload-artifact@v2
      with:
        name: windows-latest-macos-x64-debug-${{ matrix.artifact }}
        path: examples/${{ matrix.artifact }}/target/x/debug/macos/x64/${{ matrix.artifact }}.app.tar.zst

  #
  # Build test projects for macos-x64-release
  #

  build-macos-latest-macos-x64-release:
    strategy:
      fail-fast: false
      matrix:
        artifact: [helloworld, raqote-winit, template]
    runs-on: macos-latest
    needs: build-macos-latest
    steps:
    - uses: actions/checkout@v2

    # install x
    - uses: actions/download-artifact@v2
      with:
        name: macos-latest-x
    - run: chmod +x ./x

    # install rust
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly
        targets: x86_64-apple-darwin

    # install dart (used by ffi-gen)
    - uses: dart-lang/setup-dart@v1

    # prepare sources
    - run: ../x new template
      working-directory: examples

    # build artifact
    - run: ../../x build --platform macos --arch x64 --release
      working-directory: examples/${{ matrix.artifact }}

    # upload artifact
    - uses: actions/upload-artifact@v2
      with:
        name: macos-latest-macos-x64-release-${{ matrix.artifact }}
        path: examples/${{ matrix.artifact }}/target/x/release/macos/x64/${{ matrix.artifact }}.dmg

  #
  # Build test projects for windows-x64-debug
  #

  build-ubuntu-latest-windows-x64-debug:
    strategy:
      fail-fast: false
      matrix:
        artifact: [helloworld, raqote-winit, template]
    runs-on: ubuntu-latest
    needs: build-ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # install x
    - uses: actions/download-artifact@v2
      with:
        name: ubuntu-latest-x
    - run: chmod +x ./x

    # install rust
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly
        targets: x86_64-pc-windows-msvc

    # install dart (used by ffi-gen)
    - uses: dart-lang/setup-dart@v1

    # install llvm
    - uses: KyleMayes/install-llvm-action@v1
      with:
        version: 13
    - run: sudo ln -s llvm-ar-13 /usr/bin/llvm-lib
    - run: sudo ln -s lld-link-13 /usr/bin/lld-link

    # prepare sources
    - run: ../x new template
      working-directory: examples

    # build artifact
    - run: ../../x build --platform windows --arch x64
      working-directory: examples/${{ matrix.artifact }}

    # upload artifact
    - uses: actions/upload-artifact@v2
      with:
        name: ubuntu-latest-windows-x64-debug-${{ matrix.artifact }}
        path: examples/${{ matrix.artifact }}/target/x/debug/windows/x64/${{ matrix.artifact }}.msix

  build-macos-latest-windows-x64-debug:
    strategy:
      fail-fast: false
      matrix:
        artifact: [helloworld, raqote-winit, template]
    runs-on: macos-latest
    needs: build-macos-latest
    steps:
    - uses: actions/checkout@v2

    # install x
    - uses: actions/download-artifact@v2
      with:
        name: macos-latest-x
    - run: chmod +x ./x

    # install rust
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly
        targets: x86_64-pc-windows-msvc

    # install dart (used by ffi-gen)
    - uses: dart-lang/setup-dart@v1

    # install llvm
    - uses: KyleMayes/install-llvm-action@v1
      with:
        version: 13
    - run: sudo mkdir -p /usr/local/bin
    - run: sudo ln -s llvm-ar-13 /usr/local/bin/llvm-lib
    - run: sudo ln -s lld-link-13 /usr/local/bin/lld-link

    # prepare sources
    - run: ../x new template
      working-directory: examples

    # build artifact
    - run: ../../x build --platform windows --arch x64
      working-directory: examples/${{ matrix.artifact }}

    # upload artifact
    - uses: actions/upload-artifact@v2
      with:
        name: macos-latest-windows-x64-debug-${{ matrix.artifact }}
        path: examples/${{ matrix.artifact }}/target/x/debug/windows/x64/${{ matrix.artifact }}.msix

  build-windows-latest-windows-x64-debug:
    strategy:
      fail-fast: false
      matrix:
        # template fails with a weird link error (#72).
        artifact: [helloworld, raqote-winit]
    runs-on: windows-latest
    needs: build-windows-latest
    steps:
    - uses: actions/checkout@v2

    # install x
    - uses: actions/download-artifact@v2
      with:
        name: windows-latest-x

    # install rust
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly
        targets: x86_64-pc-windows-msvc

    # install dart (used by ffi-gen)
    - uses: dart-lang/setup-dart@v1

    # prepare sources
    - run: ../x.exe new template
      working-directory: examples

    # build artifact
    - run: ../../x.exe build --platform windows --arch x64
      working-directory: examples/${{ matrix.artifact }}

    # upload artifact
    - uses: actions/upload-artifact@v2
      with:
        name: windows-latest-windows-x64-debug-${{ matrix.artifact }}
        path: examples/${{ matrix.artifact }}/target/x/debug/windows/x64/${{ matrix.artifact }}.msix

  #
  # Build test projects for windows-x64-release
  #

  build-windows-latest-windows-x64-release:
    strategy:
      fail-fast: false
      matrix:
        artifact: [helloworld, raqote-winit, template]
    runs-on: windows-latest
    needs: build-windows-latest
    steps:
    - uses: actions/checkout@v2

    # install x
    - uses: actions/download-artifact@v2
      with:
        name: windows-latest-x

    # install rust
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly
        targets: x86_64-pc-windows-msvc

    # install dart (used by ffi-gen)
    - uses: dart-lang/setup-dart@v1

    # prepare sources
    - run: ../x.exe new template
      working-directory: examples

    # build artifact
    - run: ../../x.exe build --platform windows --arch x64 --release
      working-directory: examples/${{ matrix.artifact }}

    # upload artifact
    - uses: actions/upload-artifact@v2
      with:
        name: windows-latest-windows-x64-release-${{ matrix.artifact }}
        path: examples/${{ matrix.artifact }}/target/x/release/windows/x64/${{ matrix.artifact }}.msix

  #
  # Build test projects for android-arm64
  #

  build-ubuntu-latest-android-arm64:
    strategy:
      fail-fast: false
      matrix:
        artifact: [helloworld, raqote-winit, template]
        opt: [debug, release]
    runs-on: ubuntu-latest
    needs: build-ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # install x
    - uses: actions/download-artifact@v2
      with:
        name: ubuntu-latest-x
    - run: chmod +x ./x

    - name: Make llvm-readobj-12 available as llvm-readobj
      run: sudo ln -s llvm-readobj-12 /usr/bin/llvm-readobj

    # install rust
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly
        targets: aarch64-linux-android

    # install dart (used by ffi-gen)
    - uses: dart-lang/setup-dart@v1

    # install java
    - uses: actions/setup-java@v2
      with:
        distribution: temurin
        java-version: 11

    # prepare sources
    - run: ../x new template
      working-directory: examples

    # build artifact
    - run: ../../x build --platform android --arch arm64 --${{ matrix.opt }}
      working-directory: examples/${{ matrix.artifact }}

    # upload artifact
    - uses: actions/upload-artifact@v2
      with:
        name: ubuntu-latest-android-arm64-${{ matrix.opt }}-${{ matrix.artifact }}
        path: examples/${{ matrix.artifact }}/target/x/${{ matrix.opt }}/android/arm64/${{ matrix.artifact }}.apk

  build-macos-latest-android-arm64:
    strategy:
      fail-fast: false
      matrix:
        artifact: [helloworld, raqote-winit, template]
        opt: [debug, release]
    runs-on: macos-latest
    needs: build-macos-latest
    steps:
    - uses: actions/checkout@v2

    # install x
    - uses: actions/download-artifact@v2
      with:
        name: macos-latest-x
    - run: chmod +x ./x

    # install rust
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly
        targets: aarch64-linux-android

    # install dart (used by ffi-gen)
    - uses: dart-lang/setup-dart@v1

    # install java
    - uses: actions/setup-java@v2
      with:
        distribution: temurin
        java-version: 11

    # install llvm
    - uses: KyleMayes/install-llvm-action@v1
      with:
        version: 13
    - name: Make lld-13 and llvm-readobj-13 available as lld and llvm-readobj
      run: |
        sudo mkdir -p /usr/local/bin
        sudo ln -s lld-13 /usr/local/bin/lld
        sudo ln -s llvm-readobj-13 /usr/local/bin/llvm-readobj

    # prepare sources
    - run: ../x new template
      working-directory: examples

    # build artifact
    - run: ../../x build --platform android --arch arm64 --${{ matrix.opt }}
      working-directory: examples/${{ matrix.artifact }}

    # upload artifact
    - uses: actions/upload-artifact@v2
      with:
        name: macos-latest-android-arm64-${{ matrix.opt }}-${{ matrix.artifact }}
        path: examples/${{ matrix.artifact }}target/x/${{ matrix.opt }}/android/arm64/${{ matrix.artifact }}.apk

  build-windows-latest-android-arm64:
    strategy:
      fail-fast: false
      matrix:
        artifact: [helloworld, raqote-winit, template]
        opt: [debug, release]
    runs-on: windows-latest
    needs: build-windows-latest
    steps:
    - uses: actions/checkout@v2

    # install x
    - uses: actions/download-artifact@v2
      with:
        name: windows-latest-x

    # install rust
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly
        targets: aarch64-linux-android

    # install dart (used by ffi-gen)
    - uses: dart-lang/setup-dart@v1

    # install java
    - uses: actions/setup-java@v2
      with:
        distribution: temurin
        java-version: 11

    # prepare sources
    - run: ../x new template
      working-directory: examples

    # build artifact
    - run: ../../x build --platform android --arch arm64 --${{ matrix.opt }}
      working-directory: examples/${{ matrix.artifact }}

    # upload artifact
    - uses: actions/upload-artifact@v2
      with:
        name: windows-latest-android-arm64-${{ matrix.opt }}-${{ matrix.artifact }}
        path: examples/${{ matrix.artifact }}/target/x/${{ matrix.opt }}/android/arm64/${{ matrix.artifact }}.apk

  #
  # Build test projects for ios-arm64
  #

  build-ubuntu-latest-ios-arm64:
    if: github.event_name != 'pull_request' && github.repository_owner == 'cloudpeers'
    strategy:
      fail-fast: false
      matrix:
        artifact: [helloworld, raqote-winit, template]
        opt: [debug]
    runs-on: ubuntu-latest
    needs: build-ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # install x
    - uses: actions/download-artifact@v2
      with:
        name: ubuntu-latest-x
    - run: chmod +x ./x

    # install rust
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly
        targets: aarch64-apple-ios

    # install dart (used by ffi-gen)
    - uses: dart-lang/setup-dart@v1

    # install llvm
    - uses: KyleMayes/install-llvm-action@v1
      with:
        version: 13
    - run: sudo ln -s llvm-ar-13 /usr/bin/llvm-ar
    - run: sudo ln -s lld-13 /usr/bin/lld

    # prepare sources
    - run: ../x new template
      working-directory: examples

    # build artifact
    - run: ../../x build --platform ios --arch arm64 --${{ matrix.opt }}
      working-directory: examples/${{ matrix.artifact }}
      env:
        X_PEM: ${{ secrets.X_PEM }}
        X_PROVISIONING_PROFILE: ${{ secrets.X_PROVISIONING_PROFILE }}

    # upload artifact
    - run: tar --zstd -cf ${{ matrix.artifact }}.app.tar.zst ${{ matrix.artifact }}.app
      working-directory: examples/${{ matrix.artifact }}/target/x/${{ matrix.opt }}/ios/arm64
    - uses: actions/upload-artifact@v2
      with:
        name: ubuntu-latest-ios-arm64-${{ matrix.opt }}-${{ matrix.artifact }}
        path: examples/${{ matrix.artifact }}/target/x/${{ matrix.opt }}/ios/arm64/${{ matrix.artifact }}.app.tar.zst

  build-macos-latest-ios-arm64:
    if: github.event_name != 'pull_request' && github.repository_owner == 'cloudpeers'
    strategy:
      fail-fast: false
      matrix:
        artifact: [helloworld, raqote-winit, template]
        opt: [debug, release]
    runs-on: macos-latest
    needs: build-macos-latest
    steps:
    - uses: actions/checkout@v2

    # install x
    - uses: actions/download-artifact@v2
      with:
        name: macos-latest-x
    - run: chmod +x ./x

    # install rust
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly
        targets: aarch64-apple-ios

    # install dart (used by ffi-gen)
    - uses: dart-lang/setup-dart@v1

    # install llvm
    - uses: KyleMayes/install-llvm-action@v1
      with:
        version: 13
    - run: sudo mkdir -p /usr/local/bin
    - run: sudo ln -s llvm-ar-13 /usr/local/bin/llvm-ar
    - run: sudo ln -s lld-13 /usr/local/bin/lld

    # prepare sources
    - run: ../x new template
      working-directory: examples

    # build artifact
    - run: ../../x build --platform ios --arch arm64 --${{ matrix.opt }}
      working-directory: examples/${{ matrix.artifact }}
      env:
        X_PEM: ${{ secrets.X_PEM }}
        X_PROVISIONING_PROFILE: ${{ secrets.X_PROVISIONING_PROFILE }}

    # upload artifact
    - run: gtar --zstd -cf ${{ matrix.artifact }}.app.tar.zst ${{ matrix.artifact }}.app
      working-directory: examples/${{ matrix.artifact }}/target/x/${{ matrix.opt }}/ios/arm64
    - uses: actions/upload-artifact@v2
      with:
        name: macos-latest-ios-arm64-${{ matrix.opt }}-${{ matrix.artifact }}
        path: examples/${{ matrix.artifact }}/target/x/${{ matrix.opt }}/ios/arm64/${{ matrix.artifact }}.app.tar.zst

  build-windows-latest-ios-arm64:
    # if: github.event_name != 'pull_request' && github.repository_owner == 'cloudpeers'
    if: false
    strategy:
      fail-fast: false
      matrix:
        artifact: [helloworld, raqote-winit, template]
        opt: [debug]
    runs-on: windows-latest
    needs: build-windows-latest
    steps:
    - uses: actions/checkout@v2

    # install x
    - uses: actions/download-artifact@v2
      with:
        name: windows-latest-x
    - run: chmod +x ./x

    # install rust
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: nightly
        targets: aarch64-apple-ios

    # install dart (used by ffi-gen)
    - uses: dart-lang/setup-dart@v1

    # prepare sources
    - run: ../x new template
      working-directory: examples

    # build artifact
    - run: ../../x build --platform ios --arch arm64 --${{ matrix.opt }}
      working-directory: examples/${{ matrix.artifact }}
      env:
        X_PEM: ${{ secrets.X_PEM }}
        X_PROVISIONING_PROFILE: ${{ secrets.X_PROVISIONING_PROFILE }}

    # upload artifact
    - run: tar --zstd -cf ${{ matrix.artifact }}.app.tar.zst ${{ matrix.artifact }}.app
      working-directory: examples/${{ matrix.artifact }}/target/x/${{ matrix.opt }}/ios/arm64
    - uses: actions/upload-artifact@v2
      with:
        name: windows-latest-ios-arm64-${{ matrix.opt }}-${{ matrix.artifact }}
        path: examples/${{ matrix.artifact }}/target/x/${{ matrix.opt }}/ios/arm64/${{ matrix.artifact }}.app.tar.zst

  #
  # Run test projects on linux
  #

  run-linux-x64-debug:
    strategy:
      fail-fast: false
      matrix:
        task: [ubuntu-latest-linux-x64-debug]
        artifact: [helloworld, template]
    runs-on: ubuntu-latest
    needs: [build-ubuntu-latest, build-ubuntu-latest-linux-x64-debug]
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: ${{ matrix.task }}-${{ matrix.artifact }}
    - uses: actions/download-artifact@v2
      with:
        name: ubuntu-latest-xrun
    - run: chmod +x ./xrun
    - run: tar --zstd -xf ${{ matrix.artifact }}.AppDir.tar.zst
    - run: sudo apt-get update && sudo apt-get install libgtk-3-dev xvfb
    - run: xvfb-run ./xrun --path ./${{ matrix.artifact }}.AppDir/AppRun
      env:
        RUST_BACKTRACE: 1

  #
  # Run test projects on macos
  #

  run-macos-x64-debug:
    strategy:
      fail-fast: false
      matrix:
        task:
        - ubuntu-latest-macos-x64-debug
        - macos-latest-macos-x64-debug
        #- windows-latest-macos-x64-debug
        artifact: [helloworld, template]
    runs-on: macos-latest
    needs:
    - build-macos-latest
    - build-ubuntu-latest-macos-x64-debug
    - build-macos-latest-macos-x64-debug
    #- build-windows-latest-macos-x64-debug
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: ${{ matrix.task }}-${{ matrix.artifact }}
    - uses: actions/download-artifact@v2
      with:
        name: macos-latest-xrun
    - run: chmod +x ./xrun
    - run: gtar --zstd -xf ${{ matrix.artifact }}.app.tar.zst
    - run: ./xrun --path ${{ matrix.artifact }}.app/Contents/MacOS/${{ matrix.artifact }}

  #
  # Run test projects on windows
  #

  run-windows-x64-debug:
    strategy:
      fail-fast: false
      matrix:
        task:
        - ubuntu-latest-windows-x64-debug
        - macos-latest-windows-x64-debug
        - windows-latest-windows-x64-debug
        artifact: [helloworld]
    runs-on: windows-latest
    needs:
    - build-windows-latest
    - build-ubuntu-latest-windows-x64-debug
    - build-macos-latest-windows-x64-debug
    - build-windows-latest-windows-x64-debug
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: ${{ matrix.task }}-${{ matrix.artifact }}
    - uses: actions/download-artifact@v2
      with:
        name: windows-latest-xrun
    - run: 7z x ${{ matrix.artifact }}.msix
    - run: ./xrun.exe --path ${{ matrix.artifact }}.exe

  #
  # Run test projects on android
  #
